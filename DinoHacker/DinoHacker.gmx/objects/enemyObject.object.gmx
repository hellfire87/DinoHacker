<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>enemyLeft</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lastImageRotation = direction;
isAlive = true;
playerX = noone;
playerY = noone;
lastPosition = noone;
isAlert = false;
isReturning = false;
enemyPath = noone;

globalvar grid;
grid = mp_grid_create(0,0,room_width/32,room_height/32, 32,32);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isReturning = true;
isAlert = false;
playerX = noone;
playerY = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check for Player in sight
var distanceToPlayer = distance_to_object(playerObject);
if (isAlive &amp;&amp; distanceToPlayer &lt; 150) {
  var playerDirection = point_direction(x,y,playerObject.x,playerObject.y);
  var enemyDirection = direction;
  
  if (enemyDirection &gt;= (360-22)) {
    enemyDirection -= 360;
  }
  if (playerDirection &gt;= (360-22)) {
    playerDirection -= 360;
  }
  
  checkDirection = abs(enemyDirection - playerDirection);
  wallBetween = collision_line(x,y,playerObject.x, playerObject.y,Wall_Obj, false, true) == noone;
  doorBetween = collision_line(x,y,playerObject.x, playerObject.y,Door_Obj, false, true) == noone;
  lockedDoorBetween = collision_line(x,y,playerObject.x, playerObject.y,Door_Obj, false, true) == noone;
  if (checkDirection &lt; 22 &amp;&amp; wallBetween &amp;&amp; doorBetween &amp;&amp; lockedDoorBetween) {
    room_restart();
  }  
} 

//Noise check
if (isAlive &amp;&amp; distanceToPlayer &lt; 25 &amp;&amp; playerObject.noiseMove) {
    with (playerObject) instance_destroy();
    room_restart();
}

//Handle enemy sprite
if (!isAlive) {
    sprite_index = enemyDead;
    path_end();
} if (abs(lastImageRotation - direction) &gt;= 1)  {
    lastImageRotation = direction;
    if (direction &lt;= 45 || direction &gt; 315) {
        sprite_index = enemyLeft;
    } else if (direction &lt;= 135 &amp;&amp; direction &gt; 45) {
        sprite_index = enemyUp;
    } else if (direction &lt;= 225 &amp;&amp; direction &gt; 135) {
        sprite_index = enemyRight;
    } else if (direction &lt;= 315 &amp;&amp; direction &gt; 225) {
        sprite_index = enemyDown;
    }
}

//Handle Alarm
if (isAlive &amp;&amp; isAlert) {
    if (lastPosition == noone) {
        lastPosition = path_position;
        path_end();
    }

    mp_grid(playerX, playerY, 5, false);
}

//Handle Return to path
if (isAlive &amp;&amp; isReturning) {
    returnX = path_get_x(enemyPath, lastPosition);
    returnY = path_get_y(enemyPath, lastPosition);
    if (returnX == x &amp;&amp; returnY == y) {
        path_start(enemyPath, 3, 2, true);
        path_position = lastPosition;
        lastPosition = noone;
        isReturning = false;
        enemyPath = noone;
    } else {
        mp_potential_step(returnX, returnY, 3, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
