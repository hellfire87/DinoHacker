<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Turret_Sprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hacked = false;
lookDirectionLow = 0;
lookDirectionHigh = 0;
goingTowardsHigh = true;
image_speed = 0;
pausable = true;
paused = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (paused) exit;

//camera look code
isMixed = lookDirectionLow &gt; lookDirectionHigh;
    
if (goingTowardsHigh) {
    direction += 1;
    if(direction == lookDirectionHigh ) {
        goingTowardsHigh = false;           
    }
} else {
    direction -= 1;
    if (direction == lookDirectionLow ) {
        goingTowardsHigh = true;
    }
}

//check for the player
if (hacked) {
    var i;
    for (i = 0; i &lt; instance_number(enemyObject); i+= 1) {
        var enemyToFind = instance_find(enemyObject, i);
        var distanceToEnemy = distance_to_point(enemyToFind.x, enemyToFind.y);
        if (distanceToEnemy &lt; 150) {
            var enemyDirection = point_direction(x,y,enemyToFind.x,enemyToFind.y);
            var robotDirection = direction;
  
            if (robotDirection &gt;= (360-8)) {
                robotDirection -= 360;
            }
            if (enemyDirection &gt;= (360-8)) {
                enemyDirection -= 360;
            }
  
            var checkDirection = abs(robotDirection - enemyDirection);
            var wallBetween = collision_line(x,y,enemyToFind.x, enemyToFind.y,Wall_Obj, false, true) == noone;
            var doorBetween = collision_line(x,y,enemyToFind.x, enemyToFind.y,Door_Obj, false, true) == noone;
            var lockedDoorBetween = collision_line(x,y,enemyToFind.x, enemyToFind.y,LockedDoor_Obj, false, true) == noone;
            if (checkDirection &lt; 8 &amp;&amp; wallBetween &amp;&amp; doorBetween &amp;&amp; lockedDoorBetween) {
                with(enemyToFind) isAlive = false;
            }  
        }
    }    
} else {
    var distanceToPlayer = distance_to_object(playerObject);
    if (distanceToPlayer &lt; 150) {
        playerDirection = point_direction(x,y,playerObject.x,playerObject.y);
        enemyDirection = direction;
  
        if (enemyDirection &gt;= (360-8)) {
            enemyDirection -= 360;
        }
        if (playerDirection &gt;= (360-8)) {
            playerDirection -= 360;
        }
  
        checkDirection = abs(enemyDirection - playerDirection);
        wallBetween = collision_line(x,y,playerObject.x, playerObject.y,Wall_Obj, false, true) == noone;
        doorBetween = collision_line(x,y,playerObject.x, playerObject.y,Door_Obj, false, true) == noone;
        lockedDoorBetween = collision_line(x,y,playerObject.x, playerObject.y,LockedDoor_Obj, false, true) == noone;
        if (checkDirection &lt; 8 &amp;&amp; wallBetween &amp;&amp; doorBetween &amp;&amp; lockedDoorBetween) {
            room_restart();
        }  
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hacked &amp;&amp; sprite_index != TurretHacked_Sprite) {
    sprite_index = TurretHacked_Sprite;
}
image_angle = direction;

/*
if ((direction &lt;= 22.5 || direction &gt; 337.5) &amp;&amp; 
        sprite_index != TurretRight_Sprite) {
    sprite_index = TurretRight_Sprite;
} else if ((direction &lt;= 67.5 &amp;&amp; direction &gt; 22.5) &amp;&amp; 
        sprite_index != TurretTopRight_Sprite) {
    sprite_index = TurretTopRight_Sprite;
} else if ((direction &lt;= 112.5 &amp;&amp; direction &gt; 67.5) &amp;&amp; 
        sprite_index != TurretTop_Sprite) {
    sprite_index = TurretTop_Sprite;
} else if ((direction &lt;= 157.5 &amp;&amp; direction &gt; 112.5) &amp;&amp; 
        sprite_index != TurretTopLeft_Sprite) {
    sprite_index = TurretTopLeft_Sprite;
} else if ((direction &lt;= 202.5 &amp;&amp; direction &gt; 157.5) &amp;&amp; 
        sprite_index != TurretLeft_Sprite) {
    sprite_index = TurretLeft_Sprite;
} else if ((direction &lt;= 247.5 &amp;&amp; direction &gt; 202.5) &amp;&amp; 
        sprite_index != TurretBottomLeft_Sprite) {
    sprite_index = TurretBottomLeft_Sprite;
} else if ((direction &lt;= 292.5 &amp;&amp; direction &gt; 247.5) &amp;&amp; 
        sprite_index != TurretBottom_Sprite) {
    sprite_index = TurretBottom_Sprite;
} else if ((direction &lt;= 337.5 &amp;&amp; direction &gt; 292.5) &amp;&amp; 
        sprite_index != TurretBottomRight_Sprite) {
    sprite_index = TurretBottomRight_Sprite;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (hacked) {
    draw_sprite_ext(CameraSightCone_Sprite,0,x,y,1,1,direction,c_blue,1);
} else {
    draw_sprite_ext(CameraSightCone_Sprite,0,x,y,1,1,direction,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
