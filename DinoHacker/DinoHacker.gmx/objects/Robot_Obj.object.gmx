<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>robotRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lastImageRotation = direction;
pausable = true;
paused = false;
beingHacked = false;
hackingActionCompleted = false;
hacked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (paused || (beingHacked &amp;&amp; !hacked)) exit;

//Check for Player in sight
if (hacked) {
    if (!hackingActionCompleted) {
        hackingActionCompleted = true;
        beingHacked = false;
        path_speed = 3;
        
        with(hackingObject) instance_destroy();
    }

    var i;
    for (i = 0; i &lt; instance_number(enemyObject); i+= 1) {
        var enemyToFind = instance_find(enemyObject, i);
        var distanceToEnemy = distance_to_point(enemyToFind.x, enemyToFind.y);
        if (distanceToEnemy &lt; 150) {
            var enemyDirection = point_direction(x,y,enemyToFind.x,enemyToFind.y);
            var robotDirection = direction;
  
            if (robotDirection &gt;= (360-45)) {
                robotDirection -= 360;
            }
            if (enemyDirection &gt;= (360-45)) {
                enemyDirection -= 360;
            }
  
            var checkDirection = abs(robotDirection - enemyDirection);
            var wallBetween = collision_line(x,y,enemyToFind.x, enemyToFind.y,Wall_Obj, false, true) == noone;
            var doorBetween = collision_line(x,y,enemyToFind.x, enemyToFind.y,Door_Obj, false, true) == noone;
            var lockedDoorBetween = collision_line(x,y,enemyToFind.x, enemyToFind.y,LockedDoor_Obj, false, true) == noone;
            if (checkDirection &lt; 45 &amp;&amp; wallBetween &amp;&amp; doorBetween &amp;&amp; lockedDoorBetween) {
                with(enemyToFind) isAlive = false;
            }  
        }
    }    
} else {
    var distanceToPlayer = distance_to_object(playerObject);
    if (distanceToPlayer &lt; 150) {
        var playerDirection = point_direction(x,y,playerObject.x,playerObject.y);
        var robotDirection = direction;
  
        if (robotDirection &gt;= (360-45)) {
            robotDirection -= 360;
        }
        if (playerDirection &gt;= (360-45)) {
            playerDirection -= 360;
        }
  
        var checkDirection = abs(robotDirection - playerDirection);
        var wallBetween = collision_line(x,y,playerObject.x, playerObject.y,Wall_Obj, false, true) == noone;
        var doorBetween = collision_line(x,y,playerObject.x, playerObject.y,Door_Obj, false, true) == noone;
        var lockedDoorBetween = collision_line(x,y,playerObject.x, playerObject.y,LockedDoor_Obj, false, true) == noone;
        if (checkDirection &lt; 45 &amp;&amp; wallBetween &amp;&amp; doorBetween &amp;&amp; lockedDoorBetween) {
            room_restart();
        }  
    }
}

//Handle enemy sprite
if (abs(lastImageRotation - direction) &gt;= 1)  {
    lastImageRotation = direction;
    if (direction &lt;= 45 || direction &gt; 315) {
        sprite_index = robotRight;
    } else if (direction &lt;= 135 &amp;&amp; direction &gt; 45) {
        sprite_index = robotUp;
    } else if (direction &lt;= 225 &amp;&amp; direction &gt; 135) {
        sprite_index = robotLeft;
    } else if (direction &lt;= 315 &amp;&amp; direction &gt; 225) {
        sprite_index = robotDown;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(hackingObject) &amp;&amp; distance_to_object(playerObject) &lt; 10 &amp;&amp; !hacked) {
    instance_create(view_wview[0]/2 + view_xview[0], view_yview[0] + view_hview[0] - 100, hackingObject);
    hackingObject.terminalInstance = id;
    
    beingHacked = true;
    path_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!beingHacked ) {
    if (hacked) {
        draw_sprite_ext(RobotSightCone_Sprite,0,x,y,1,1,direction,c_blue,1);
    } else {
        draw_sprite_ext(RobotSightCone_Sprite,0,x,y,1,1,direction,c_white,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
